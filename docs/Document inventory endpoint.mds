# Document inventory endpoints  

---

### 1. GET /products
### Description
Creates a new product in the inventory. 

- **Method:** `GET`  
- **Endpoint:** `/products`  
- **Auth Required:** No (public access).  
- **Response 200 (OK):**

### Flow
1. Receives the **name**, **price**, and **stock** fields from the `req.body`.  
2. If any are missing â†’ responds with **400 Bad Request**.  
3. Inserts the product into the database's **products** table (using `pool.query`).  
4. Returns the newly created product (`RETURNING *`) with a status of **201 Created**.  
5. If an error occurs â†’ responds with a **500 Internal Server Error**. 

# ðŸ“¦ Sales API â€“ Backend (POST /sales)

## FunciÃ³n: `addOrder(req, res)`

### ðŸ”¹ DescripciÃ³n
Este endpoint permite **registrar una nueva venta (order)** en la base de datos.

### ðŸ”¹ LÃ³gica del cÃ³digo
1. **Recibe los datos del cliente** desde `req.body`:  
   - `id_user` â†’ identifica al usuario que realiza la compra.  
   - `total` â†’ monto total de la venta.  

2. **ValidaciÃ³n de campos requeridos**:  
   - Si falta `id_user` o `total`, responde con un **400 Bad Request** y un mensaje de error.

3. **InserciÃ³n en la base de datos**:  
   - Ejecuta una query SQL para insertar la venta en la tabla `orders`:  
     ```sql
     INSERT INTO orders (id_user, total) VALUES ($1, $2) RETURNING *;
     ```
   - `RETURNING *` devuelve el registro reciÃ©n creado.

4. **Respuesta exitosa**:  
   - Retorna el nuevo pedido en formato JSON con cÃ³digo **201 Created**.

5. **Manejo de errores**:  
   - Si ocurre un error en la base de datos o en el servidor, responde con un **500 Internal Server Error** y un mensaje descriptivo.

---


